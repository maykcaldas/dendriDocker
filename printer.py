#!-*- coding: utf8 -*-


import os
import time

class printer():
    '''
    doc
    '''

    def __init__(self):
        '''
        constructor
        '''
        pass


    def printPlumedDock(self,args):
        if os.path.isfile(args['dockOut']):
            print('!!!Backing up the existing docking file!!!')
            os.rename(args['dockOut'], 'bck.'+args['dockOut'])
        f=open(args['dockOut'],'w')

        f.write('# Plumed input file generated by dendriDocker\n')
        f.write('# {0}\n'.format(time.ctime()))
        f.write('# This file is supposed to dock {0} molecules of {1} in your dendrimer\n'.format(args['nligand'],args['ligand']))
        f.write('')
        f.write('\n')
        
        f.write("DEND: COM ATOMS=1-{0}\n".format(args['atomInDend']))

        for i in range(int(args['nligand'])):
            f.write('{0}_{1}: COM ATOMS={2}-{3}\n'.format(args['ligand'],
                                                          i+1,
                                                          (int(args['atomInDend'])+(int(args['atomInLigand'])*i)+1),
                                                          (int(args['atomInDend'])+(int(args['atomInLigand'])*(i+1)) ) ) )
        f.write('\n')


        for i in range(int(args['nligand'])):
            f.write('d_{0}: DISTANCE ATOMS=DEND,{1}_{0}\n'.format(i+1,args['ligand']))
        f.write('\n')
        

        #We do not need walls in docking procedure
        # for i in range(int(args['nligand'])):
        #     f.write('wall_{0}: UPPER_WALLS ...\n'.format(i+1))
        #     f.write('ARG=d_{0}\n'.format(i+1))
        #     f.write('KAPPA=1000.0\n'.format())
        #     f.write('AT=\n'.format())
        #     f.write('EXP=2.0\n'.format())
        #     f.write('OFFSET=0.0\n'.format())
        #     f.write('...\n'.format())
        #     if i+1 != int(args['nligand']):
        #         f.write('\n')
        # f.write('\n')
        
        if args['method'] == "harmonic":
            for i in range(int(args['nligand'])):
                f.write('rest_{0}: RESTRAINT ARG=d_{0} AT=1.10 KAPPA={1}\n'.format(i+1, args['force']))

        elif args['method'] == "linear":
            for i in range(int(args['nligand'])):
                f.write('rest_{0}: RESTRAINT ARG=d_{0} AT=1.10 SLOPE={1}\n'.format(i+1, args['force']))
        
        elif args['method'] == "harmonicWall":
            for i in range(int(args['nligand'])):
                f.write('rest_{0}: UPPER_WALLS ARG=d_{0} AT=0.0 KAPPA={1} EXP=2 EPS=2\n'.format(i+1, args['force']))
        
        elif args['method'] == "linearWall":
            for i in range(int(args['nligand'])):
                f.write('rest_{0}: UPPER_WALLS ARG=d_{0} AT=0.0 KAPPA={1} EXP=1 EPS=1\n'.format(i+1, args['force']))
        
        elif args['method'] == "shell":
            for i in range(int(args['nligand'])):
                if i < 0.05*int(args['nligand']):
                    f.write('rest_{0}: RESTRAINT ARG=d_{0} AT=0.0 KAPPA={1}\n'.format(i+1, args['force']))
                elif i < 0.15*int(args['nligand']):
                    f.write('rest_{0}: RESTRAINT ARG=d_{0} AT=0.2 KAPPA={1}\n'.format(i+1, args['force']))
                elif i < 0.30*int(args['nligand']):
                    f.write('rest_{0}: RESTRAINT ARG=d_{0} AT=0.4 KAPPA={1}\n'.format(i+1, args['force']))
                elif i < 0.45*int(args['nligand']):
                    f.write('rest_{0}: RESTRAINT ARG=d_{0} AT=0.6 KAPPA={1}\n'.format(i+1, args['force']))
                elif i < 0.60*int(args['nligand']):
                    f.write('rest_{0}: RESTRAINT ARG=d_{0} AT=0.8 KAPPA={1}\n'.format(i+1, args['force']))
                elif i < 0.75*int(args['nligand']):
                    f.write('rest_{0}: RESTRAINT ARG=d_{0} AT=1.0 KAPPA={1}\n'.format(i+1, args['force']))
                else:
                    f.write('rest_{0}: RESTRAINT ARG=d_{0} AT=1.2 KAPPA={1}\n'.format(i+1, args['force']))
        f.write('\n')

        f.write('# Dock plumed file successfully written by dendrimerDocker')

        f.close()

        print('Finallyzing the docking file.\n')


    def printPlumed(self,args):
        if os.path.isfile('plumed.dat'):
            print('!!!Backing up the existing file!!!')
            os.rename('plumed.dat', 'bck.plumed.dat')
        f=open('plumed.dat','w')


    def printTop(self,args):
        if os.path.isfile(args['topolOut']):
            print('!!!Backing up the existing topology file!!!')
            os.rename(args['topolOut'], 'bck.'+args['topolOut'])
        f=open(args['topolOut'],'w')

        f.write('; Topology file generated by dendriDocker\n')
        f.write('; {0}\n'.format(time.ctime()))
        f.write('; This file is supposed to be the topology of {0} molecules of {1} in your dendrimer\n'.format(args['nligand'],args['ligand']))
        f.write('; Please, note that the {0} topology files are inputed here as "{0}"\n'.format(args['ligand']))
        f.write('\n')
        
        f.write('; Include forcefield parameters\n'.format())
        f.write('#include "{0}/forcefield.itp"\n'.format(args['FFPath']))
        f.write('\n')

        f.write('[ moleculetype ]\n')
        f.write('; Name \t \t \t nrexcl\n')
        f.write(' System \t \t \t 2\n')
        f.write('\n')

        f.write('; Include topologies\n')
        f.write('#include "{0}"\n'.format(args['dendTop']))
        f.write('#include "{0}"\n'.format(args['ligandTop']))
        f.write('\n')

        f.write('; Include water topology\n')
        f.write('#include "{0}/spc.itp"\n'.format(args['FFPath']))
        f.write('\n')

        f.write('; Include generic topology for ions\n')
        f.write('#include "{0}/ions.itp"\n'.format(args['FFPath']))
        f.write('\n')

        f.write('[ system ]\n')
        f.write('; Name\n'.format())
        f.write(' {0}\n'.format(args['nameOut']))
        f.write('\n')

        f.write('[ molecules ]\n')
        f.write('; Compound \t \t \t #mols\n'.format())
        f.write(' {0:15s} \t {1}\n'.format(args['host'], '1'))
        f.write(' {0:15s} \t {1}\n'.format(args['ligand'],args['nligand']))
        
        f.close()

        print('Finallyzing the topology file.\n')


    def printSetup(self,args):
        if os.path.isfile(args['runOut']):
            print('!!!Backing up the existing run file!!!')
            os.rename(args['runOut'], 'bck.'+args['runOut'])
        f=open(args['runOut'],'w')
        
        f.write('#!/bin/bash\n')
        f.write('\n')
        f.write('gmx={0}/bin/gmx\n'.format(args['gmxPath']))
        f.write('FF={0}\n'.format(args['FFPath']))
        f.write('\n')
        
        f.write('### DEFINING THE BOX ###\n')
        f.write('${gmx} editconf \\\n')
        f.write('\t \t -f {0} \\\n'.format(args['dendCoord']))
        f.write('\t \t -c \\\n')
        f.write('\t \t -d 1.5 \\\n')
        f.write('\t \t -bt cubic \\\n')
        f.write('\t \t -o box.gro\n')
        f.write('\n')

        f.write('### INSERT MOLECULES ###\n')
        f.write('${gmx} insert-molecules \\\n')
        f.write('\t \t -f box.gro \\\n')
        f.write('\t \t -ci {0} \\\n'.format(args['ligandCoord']))
        f.write('\t \t -nmol {0} \\\n'.format(args['nligand']))
        f.write('\t \t -o box.gro\n')
        f.write('\n')

        f.write('### DEFINING THE BOX ###\n')
        f.write('${gmx} editconf \\\n')
        f.write('\t \t -f box.gro \\\n')
        f.write('\t \t -c \\\n')
        f.write('\t \t -d 0.2 \\\n')
        f.write('\t \t -bt cubic \\\n')
        f.write('\t \t -o box1.gro\n')
        f.write('\n')
        
        f.write('### ENERGY MINIMIZATION ###\n')
        f.write('${gmx} grompp \\\n')
        f.write('\t \t -f {0} \\\n'.format(args['mdpPath']+'/em.mdp'))
        f.write('\t \t -c box1.gro\\\n')
        f.write('\t \t -p {0}\\\n'.format(args['topolOut']))
        f.write('\t \t -maxwarn 5\\\n')
        f.write('\t \t -o em1.tpr')
        f.write('\n')
        
        f.write('${gmx} mdrun \\\n')
        f.write('\t \t -s em1.tpr \\\n')
        f.write('\t \t -deffnm em1 \n')
        f.write('\n')

        f.write('### REDEFINING THE BOX ###\n')
        f.write('${gmx} editconf \\\n')
        f.write('\t \t -f em1.gro \\\n')
        f.write('\t \t -c \\\n')
        f.write('\t \t -d 0.3 \\\n')
        f.write('\t \t -bt cubic \\\n')
        f.write('\t \t -o box2.gro \n')
        f.write('\n')
        
        f.write('### SOLVATE ###\n')
        f.write('${gmx} solvate \\\n')
        f.write('\t \t -cp box2.gro \\\n')
        f.write('\t \t -cs spc216.gro \\\n')
        f.write('\t \t -p {0} \\\n'.format(args['topolOut']))
        f.write('\t \t -o solv.gro \n')
        f.write('\n')
        
        f.write('### ADDING ION ###\n')
        f.write('${gmx} grompp \\\n')
        f.write('\t \t -f {0} \\\n'.format(args['mdpPath']+'/ion.mdp'))
        f.write('\t \t -c solv.gro\\\n')
        f.write('\t \t -p {0}\\\n'.format(args['topolOut']))
        f.write('\t \t -maxwarn 5\\\n')
        f.write('\t \t -o ion.tpr')
        f.write('\n')
        
        f.write('echo SOL | ${gmx} genion \\\n')
        f.write('\t \t -s ion.tpr \\\n')
        f.write('\t \t -p {0} \\\n'.format(args['topolOut']))
        f.write('\t \t -pname NA+ \\\n')
        f.write('\t \t -nname CL- \\\n')
        f.write('\t \t -neutral \\\n')
        # f.write('\t \t -nn {0} \\\n'.format(2**(2+int(args['dendGeneration']))) )
        # f.write('\t \t -np {0} \\\n'.format(args['nligand']))
        f.write('\t \t -o ion.gro \n')
        f.write('\n')
        
        f.write('### ENERGY MINIMIZATION ###\n')
        f.write('${gmx} grompp \\\n')
        f.write('\t \t -f {0} \\\n'.format(args['mdpPath']+'/em.mdp'))
        f.write('\t \t -c ion.gro\\\n')
        f.write('\t \t -p {0}\\\n'.format(args['topolOut']))
        f.write('\t \t -maxwarn 5\\\n')
        f.write('\t \t -o em2.tpr')
        f.write('\n')
        
        f.write('${gmx} mdrun \\\n')
        f.write('\t \t -s em2.tpr \\\n')
        f.write('\t \t -deffnm em2 \n')
        f.write('\n')
        
        f.write('### DOCKING PROCEDURE ###\n')
        f.write('${gmx} grompp \\\n')
        f.write('\t \t -f {0} \\\n'.format(args['mdpPath']+'/md_dock.mdp'))
        f.write('\t \t -c em2.gro\\\n')
        f.write('\t \t -p {0}\\\n'.format(args['topolOut']))
        f.write('\t \t -maxwarn 5\\\n')
        f.write('\t \t -o dock.tpr')
        f.write('\n')
        
        f.write('${gmx} mdrun \\\n')
        f.write('\t \t -s dock.tpr \\\n')
        f.write('\t \t -deffnm dock \\\n')
        f.write('\t \t -plumed {0} \\\n'.format(args['dockOut']))
        f.write('\n')
        
        f.write('# Run file successfully written by dendrimerDocker')

        f.close()

        print('Finallyzing the run file. \n')
