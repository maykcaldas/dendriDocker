#!-*- coding: utf8 -*-


import os
import time

class printer():
    '''
    doc
    '''

    def __init__(self):
        '''
        constructor
        '''
        pass

    def printPlumedDock(self,args):
        if os.path.isfile('plumed_dock.dat'):
            print("!!!Backing up the existing docking file!!!")
            os.rename('plumed_dock.dat', 'bck.plumed_dock.dat')
        f=open('plumed_dock.dat','w')

        f.write("# Plumed input file generated by dendriDocker\n")
        f.write("# {0}\n".format(time.ctime()))
        f.write("# This file is supposed to dock {0} molecules of {1} in your dendrimer\n".format(args['nligand'],args['ligand']))
        f.write("")
        f.write("\n")
        
        for i in range(int(args["nligand"])):
            f.write("{0}_{1}: COM ATOMS={2}-{3}\n".format(args["ligand"],
                                                          i+1,
                                                          (int(args['atomInDend'])+(int(args['atomInLigand'])*i)+1),
                                                          (int(args['atomInDend'])+(int(args['atomInLigand'])*(i+1)) ) ) )
        f.write("\n")


        for i in range(int(args["nligand"])):
            f.write("d_{0}: DISTANCE ATOMS=dend,{1}_{0}\n".format(i+1,args["ligand"]))
        f.write("\n")
        

        #We do not need walls in docking procedure
        # for i in range(int(args["nligand"])):
        #     f.write("wall_{0}: UPPER_WALLS ...\n".format(i+1))
        #     f.write("ARG=d_{0}\n".format(i+1))
        #     f.write("KAPPA=1000.0\n".format())
        #     f.write("AT=\n".format())
        #     f.write("EXP=2.0\n".format())
        #     f.write("OFFSET=0.0\n".format())
        #     f.write("...\n".format())
        #     if i+1 != int(args['nligand']):
        #         f.write("\n")
        # f.write("\n")
        
        for i in range(int(args['nligand'])):
            f.write("rest_{0}: RESTRAINT ARG=d_{0} AT=0.25 KAPPA=400.0\n".format(i+1))
        f.write("\n")

        f.write("# Dock plumed file successfully written by dendrimerDocker")

        print("Finallyzing the docking file.\n")


    def printPlumed(self,args):
        if os.path.isfile('plumed.dat'):
            print("!!!Backing up the existing file!!!")
            os.rename('plumed.dat', 'bck.plumed.dat')
        f=open('plumed.dat','w')

    def printTop(self,args):
        if os.path.isfile('topol.top'):
            print("!!!Backing up the existing topology file!!!")
            os.rename('topol.top', 'bck.topol.top')
        f=open('topol.top','w')

        f.write("# Topology file generated by dendriDocker\n")
        f.write("# {0}\n".format(time.ctime()))
        f.write("# This file is supposed to be the topology of {0} molecules of {1} in your dendrimer\n".format(args['nligand'],args['ligand']))
        f.write("# Please, note that the {0} topology files are inputed here as '{0}.itp'\n".format(args['ligand']))
        f.write("\n")
        
        f.write("; Include forcefield parameters\n".format())
        f.write("#include '{0}/forcefield.itp'\n".format(args['FFPath']))
        f.write("\n")

        f.write("[ moleculetype ]\n")
        f.write("; Name \t \t \t nrexcl\n")
        f.write(" System \t \t \t 2\n")
        f.write("\n")

        f.write("; Include topologies\n")
        f.write("#include {0}.itp\n".format(args['dendTop']))
        f.write("#include {0}.itp\n".format(args['ligandTop']))
        f.write("\n")

        f.write("; Include water topology\n")
        f.write("#include '{0}/spc.itp'\n".format(args['FFPath']))
        f.write("\n")

        f.write("; Include generic topology for ions\n")
        f.write("#include '{0}/ion.itp'\n".format(args['FFPath']))
        f.write("\n")

        f.write("[ system ]\n")
        f.write("; Name\n".format())
        f.write(" {0}\n".format(args['nameOut']))
        f.write("\n")

        f.write("[ molecules ]\n")
        f.write("; Compound \t \t \t #mols\n".format())
        f.write(" {0:15s} \t {1}\n".format("Dendrimer", "1"))
        f.write(" {0:15s} \t {1}\n".format(args['ligand'],args['nligand']))
        f.write("\n")

        f.write("# Topology file successfully written by dendrimerDocker")

        print("Finallyzing the topology file.\n")

    def printSetup(self):
        pass
        